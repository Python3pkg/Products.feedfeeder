Consuming Feeds
===============

The basic premise here is that there is a global utility available that
is capable of taking an object that either implements or adapts to
the IFeedsContainer interface.  And with that object, it can retrieve
feed items and store them within the object ... typically as
(but not restricted to) child items in a folderish container.

Mock Container
~~~~~~~~~~~~~~

The requirements for getting feed information and populating feed items
are pretty minimal.  The class merely has to implement IFeedsContainer.

  >>> from Products.feedfeeder.interfaces.container import IFeedsContainer
  >>> from Products.feedfeeder.interfaces.item import IFeedItem
  >>> import zope.interface

  >>> class MockWorkflowTool(object):
  ...     def doActionFor(self, obj, action, comment):
  ...         pass

  >>> class MockContextState(object):
  ...     def is_structural_folder(self):
  ...         return True
  
  >>> class MockField(object):
  ...     def getAllowedContentTypes(self, obj):
  ...         return []

  >>> class MockFeedItem(dict): 
  ...     zope.interface.implements(IFeedItem)
  ...     portal_workflow = MockWorkflowTool()
  ...     def restrictedTraverse(self, path):
  ...         return MockContextState()
  ...     def invokeFactory(self, type_name, id):
  ...         self[id] = MockFeedEnclosure(id)
  ...         return id
  ...     def update(self, **kwargs):
  ...         for key, value in kwargs.items():
  ...             setattr(self, key, value)
  ...     def setModificationDate(self, value):
  ...         self.modification_date = value
  ...     def modified(self): return self.modification_date
  ...     def getText(self):
  ...         return self.text
  ...     def manage_renameObject(self, orig_id, new_id):
  ...         if new_id in self.keys():
  ...             raise KeyError('Enclosure with %r id already exists' % repr(new_id))
  ...         self[new_id] = self[orig_id]
  ...         del self[orig_id]
  ...         self[new_id].id = new_id
  ...     def objectIds(self): return self.keys()
  ...     def setEffectiveDate(self, x): pass
  ...     def reindexObject(self, idxs=[]): pass
  ...     def getField(self, name):
  ...         return MockField()

  >>> class MockFeedsContainer(dict):
  ...     zope.interface.implements(IFeedsContainer)
  ...     portal_workflow = MockWorkflowTool()
  ...     def invokeFactory(self, type_name, id):
  ...         self[id] = MockFeedItem()
  ...         return id
  ...     def manage_delObjects(self, ids):
  ...         for id in ids: del self[id]

  >>> class MockFeedEnclosure(object):
  ...     def __init__(self, id):
  ...         self.id = id
  ...     def getId(self):
  ...         return self.id
  ...     def Title(self):
  ...         return getattr(self, 'title', '')
  ...     def update(self, **kwargs):
  ...         for key, value in kwargs.items():
  ...             setattr(self, key, value)
  ...     def size(self):
  ...         if hasattr(self, 'text'):
  ...             return len(self.text)
  ...         return len(getattr(self, 'data', ''))
  ...     def update_data(self, data, mime_type):
  ...         self.data = data
  ...         if hasattr(data, 'read'):
  ...             self.data = data.read()
  ...         self.mime_type = mime_type
  ...     def __str__(self):
  ...         return '<MockFeedEnclosure id=%s>' % self.id
  ...     __repr__ = __str__

Using The Utility
~~~~~~~~~~~~~~~~~

Lets begin by getting the proper path to our example atom feed and setting
up our mock feedscontainer.

  >>> import os
  >>> import Products.feedfeeder
  >>> samplesdir = os.path.dirname(Products.feedfeeder.__file__)
  >>> samplesdir = os.path.join(samplesdir, 'tests', 'samples')

Make sure the feed consumer tells us if it has been given a bad file
path.

  >>> from Products.feedfeeder import folder
  >>> from Products.feedfeeder import utilities
  >>> consumer = utilities.FeedConsumer()
  >>> container = folder.FolderFeeds()
  >>> container.feedURLs = ['file:///foobar.xml']
  >>> container.__parent__ = MockFeedsContainer()
  >>> consumer.retrieveFeedItems(container)
  Traceback (most recent call last):
  ...
  IOError: Couldn't locate '/foobar.xml'

Now lets use our utilty to build the feed items.

  >>> os.chdir(samplesdir)
  >>> samplefiles = [os.path.join(samplesdir, 'samplefeed1.xml'),
  ...                os.path.join(samplesdir, 'samplefeed2.xml'),
  ...                os.path.join(samplesdir, 'samplefeed3.xml'),
  ...                os.path.join(samplesdir, 'samplefeed4.xml')]
  >>> container.feedURLs = ['file://'+x for x in samplefiles]
  >>> consumer.retrieveFeedItems(container)
  >>> len(container.__parent__)
  6

Make sure the content all matches up.

  >>> test_doc = container.__parent__['0cfbced08adbdc1f3bf30b4120371b7d']
  >>> test_doc.title
  u'Philips Nieuws 24 juli'
  >>> len(test_doc)
  1
  >>> test_doc.values()[0].size()
  1000
  >>> test_doc.subject
  [u'example']
  
Lets check out the document's feed item metadata.

  >>> test_doc.creators
  [u'Miriam Mobach']
  >>> test_doc.modification_date
  DateTime('2006/07/21 12:00:00 GMT+0')
 
There are duplicate entries in both feed1 and feed2.  In the case of the
first duplicate, feed2's entry is later and thus should be the one we have.

  >>> duplicate1 = container.__parent__['649c8553c458001dbbb9b15957d58a92']
  >>> duplicate1.text
  u'<div>\nhello bar\n</div>'
  
For the second duplicate, the first entry is the latest and should be
kept.
  >>> duplicate2 = container.__parent__['30ca408a75537f05d03821c64473289e']
  >>> duplicate2.text
  u'<div>\nwoo hoo, a party!\n</div>'
  >>> len(duplicate2)
  2
  >>> sorted([x.id for x in duplicate2.values()])
  [u'test2.doc', u'test3.xls']

Get our item that talks about the thesis defence of Reinout.

  >>> thesis = container.__parent__['f065f774e8c28bf9f33221f290c4ca6a']
  >>> thesis.title
  u'Thesis defence: 15 January 2007 15:00'
  >>> thesis.subject
  []

Now someone could have added an enclosure that is actually just a link.  We append that link with an "a href" to the text of the item.

  >>> thesis.getText()
  u'<div>\nGreat news: a final thesis defence date!\n</div>'
