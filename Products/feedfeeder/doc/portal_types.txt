.. -*-doctest-*-

============
Portal Types
============

Start with some feed files.

    >>> import os
    >>> import Products.feedfeeder
    >>> samplesdir = os.path.dirname(Products.feedfeeder.__file__)
    >>> samplesdir = os.path.join(samplesdir, 'tests', 'samples')
    >>> sample_urls = [
    ...     'file://'+os.path.join(samplesdir, sample) for sample in
    ...     'samplefeed1.xml', 'samplefeed2.xml']

Open a browser and log in as a member who can add items to a folder.

    >>> from Products.Five.testbrowser import Browser
    >>> from Products.PloneTestCase import ptc
    >>> owner_browser = Browser()
    >>> owner_browser.handleErrors = False
    >>> owner_browser.open(portal.absolute_url())
    >>> owner_browser.getLink('Log in').click()
    >>> owner_browser.getControl(
    ...     'Login Name').value = ptc.portal_owner
    >>> owner_browser.getControl(
    ...     'Password').value = ptc.default_password
    >>> owner_browser.getControl('Log in').click()

Open a browser and log in as a member who can not add items to the folder.

    >>> from Products.Five.testbrowser import Browser
    >>> from Products.PloneTestCase import ptc
    >>> member_browser = Browser()
    >>> member_browser.handleErrors = False
    >>> member_browser.open(portal.absolute_url())
    >>> member_browser.getLink('Log in').click()
    >>> member_browser.getControl(
    ...     'Login Name').value = ptc.default_user
    >>> member_browser.getControl(
    ...     'Password').value = ptc.default_password
    >>> member_browser.getControl('Log in').click()

Enable the intranet workflow for a content type and allow that content
type to be added to demonstrate the limits of the workflow transition
selection.

    >>> portal.portal_workflow.setChainForPortalTypes(
    ...     ('Topic',), ('intranet_workflow',))
    >>> portal.events.setLocallyAllowedTypes(
    ...     ('Event', 'Topic', 'File'))

The feeds form is available on any folderish object to contributors
who can add items to the folder.

    >>> owner_browser.open(portal.events.absolute_url())
    >>> owner_browser.getLink('Feeds').click()

The feeds form allows the contributor to add feed URLs, to specify the
portal type of added items, and to specify the default workflow
transitions to perform on newly added items.

    >>> owner_browser.getControl(
    ...     'Feed URLs').value = '\n'.join(sample_urls)
    >>> owner_browser.getControl('Event').selected = True
    >>> item_trans_ctl = owner_browser.getControl(
    ...     name="form.widgets.itemTransitions.from")
    >>> submit_ctl = item_trans_ctl.getControl(
    ...     'Submit for publication (Simple Publication Workflow)')
    >>> publish_ctl = item_trans_ctl.getControl(
    ...     'Publish internally (Intranet/Extranet Workflow)')
    >>> submit_ctl.mech_form.new_control(
    ...     type='hidden', name='form.widgets.itemTransitions:list',
    ...     attrs=dict(value=submit_ctl.optionValue))
    >>> publish_ctl.mech_form.new_control(
    ...     type='hidden', name='form.widgets.itemTransitions:list',
    ...     attrs=dict(value=publish_ctl.optionValue))

If the workflow transitions are not available for the content type
selected a validation error is raised.  Note that this validation may
not be accurate where transitions guards depend on specifics of the
individual item.

    >>> owner_browser.getControl('Apply').click()
    >>> print owner_browser.contents
    <...
    ...There were some errors...
    ...The following transitions are invalid for the 'Event' content
    type: 'Publish internally (Intranet/Extranet Workflow)...

Select valid workflow transitions and save the form.

    >>> item_trans_ctl = owner_browser.getControl(
    ...     name="form.widgets.itemTransitions.to")
    >>> submit_ctl = item_trans_ctl.getControl(
    ...     'Submit for publication (Simple Publication Workflow)')
    >>> item_trans_ctl = owner_browser.getControl(
    ...     name="form.widgets.itemTransitions.from")
    >>> publish_ctl = item_trans_ctl.getControl(
    ...     'Publish (Simple Publication Workflow)')
    >>> submit_ctl.mech_form.new_control(
    ...     type='hidden', name='form.widgets.itemTransitions:list',
    ...     attrs=dict(value=submit_ctl.optionValue), index=220)
    >>> publish_ctl.mech_form.new_control(
    ...     type='hidden', name='form.widgets.itemTransitions:list',
    ...     attrs=dict(value=publish_ctl.optionValue), index=230)
    >>> owner_browser.getControl('Apply').click()
    >>> print owner_browser.contents
    <...
    ...Data successfully updated...

Now that this folder has feed URLs, it can be queried in the catalog.

    >>> [b.getObject() for b in portal.portal_catalog(
    ...     object_provides=
    ...     'Products.feedfeeder.interfaces.folder.IFeedFolder')]
    [<ATBTreeFolder at /plone/events>]

The feeds form is not available to members who can not add items there.

    >>> member_browser.open(portal.events.absolute_url())
    >>> member_browser.getLink('Feeds')
    Traceback (most recent call last):
    LinkNotFoundError

Update All Feed Folders
-----------------------

A view is provided for updating all folderish items that have feed
URLs set.

Before the view has been loaded, no feed items have been added to the
folder with feed URLs.

    >>> portal.events.contentValues()
    [<ATTopic at /plone/events/aggregator>]

The update all view will only query for folderish items at or below
the point in the hierarchy of the object for which the view is
loaded.  Load the view for a context which contains no feed folders.
No items are created.

    >>> owner_browser.open(
    ...     portal.news.absolute_url()+'/update_all_feed_folders')
    >>> portal.events.contentValues()
    [<ATTopic at /plone/events/aggregator>]

After loading the update all view for a context which contains feed
folders, items have been created in the folder for the feed items.

    >>> owner_browser.open(
    ...     portal.events.absolute_url()+'/update_all_feed_folders')
    >>> portal.events.contentValues()
    [<ATEvent at /plone/events/0cfbced08adbdc1f3bf30b4120371b7d>,
     <ATFile at /plone/events/136d893f04d8a7582b551df541fdff19>,
     <ATEvent at /plone/events/30ca408a75537f05d03821c64473289e>,
     <ATFile at /plone/events/4416d3618704a80b3dfa28a907edf725>,
     <ATEvent at /plone/events/649c8553c458001dbbb9b15957d58a92>,
     <ATFile at /plone/events/6e3e14007b03794de64cfafe071607e6>,
     <ATTopic at /plone/events/aggregator>,
     <ATFile at /plone/events/bc5f29b4fabfa05bd12d301c34668724>,
     <ATEvent at /plone/events/c17db5a7fa227e2e34193c71a173dbb1>]

Fields
------

Feed item data is applied to the newly created item using an adapter.
The default adapter is intended to be as flexible as possible and
suitable for the default Plone/ATCT content types and the conventions
those schemata establish.  The new item's title, description, creator,
modification date, and subject/keywords will all be updated from the
feed item data.

The feed item URL is passed into the content item's update method as
both the "remoteURL" and "eventURL" keyword arguments.  Thus the
Archetypes implementation will ignore those keyword arguments for
content types whose schema contains no such field but will
successfully use the "remoteURL" keyword argument for the "Link"
content type or the "eventURL" keyword argument for the "Event"
content type.  Similarly, if the feed item has any body content it
will be passed in as the "text" keyword argument and thus will be
consumed by content types with a "text" field such as with the
"Document", "Event", "News Item" content types.

The added content items have been populated from the feed item
contents.

    >>> item = portal.events['0cfbced08adbdc1f3bf30b4120371b7d']
    >>> item.Type()
    u'Event'
    >>> item.Title()
    'Philips Nieuws 24 juli'
    >>> item.Description()
    'This is a sample summary'
    >>> item.event_url()
    'file:test1.pdf'
    >>> item.modified()
    DateTime('2006/07/21 12:00:00 GMT+0')
    >>> item.Creator()
    'Miriam Mobach'
    >>> item.Subject()
    ('example',)

    >>> item = portal.events['30ca408a75537f05d03821c64473289e']
    >>> item.getText()
    '<div>\nwoo hoo, a party!\n</div>'

Enclosures
----------

Any feed item enclosures will be added as well using the same logic as
the Zope DAV/FTP handling.  If the new content item is a DAV/FTP
collection, the enclosures will be added inside the content item.
Otherwise the enclosures will be added to the feed folder as siblings
to the new item.

(Haven't been able to figure out how to hook into DAV/FTP item adding)

    TODO
