Feedfeeder Integration
======================

Feedfeeder uses feedparser to read in Atom feeds and to create new
documents or files if there are new items in that feed. Those new
items are created inside the feedfeederfolder itself, as it is a
folderish type.

Lets begin by creating our feeder.

  >>> id = folder.invokeFactory('Folder', 'feeder')
  >>> feeder = folder.feeder
  
Setup some feeds.

  >>> import os
  >>> from zope import interface
  >>> import Products.feedfeeder
  >>> from Products.feedfeeder.interfaces import folder as folder_ifaces

  >>> samplesdir = os.path.dirname(Products.feedfeeder.__file__)
  >>> samplesdir = os.path.join(samplesdir, 'tests', 'samples')
  >>> os.chdir(samplesdir)
  >>> samplefiles = [os.path.join(samplesdir, 'samplefeed1.xml'),
  ...                os.path.join(samplesdir, 'samplefeed2.xml')]
  >>> feedContainer = folder_ifaces.IFolderFeeds(feeder)
  >>> feedContainer.feedURLs = ['file://'+x for x in samplefiles ]
  >>> feedContainer.itemType = 'Event'
  >>> interface.alsoProvides(feeder, folder_ifaces.IFeedFolder)
  >>> feeder.reindexObject(idxs=['object_provides'])


Available Transitions
---------------------

Feed items that are added during an update can be automatically
transitioned.

Set a workflow for Files, as we use them for enclosures::

  >>> portal.portal_workflow.setChainForPortalTypes(
  ...     ['File'], 'simple_publication_workflow')

See what transitions we have available::

  >>> [t.title for t in folder_ifaces.TransitionsVocab(feeder)]
  [u'Publish (Simple Publication Workflow)',
   u'Retract (Simple Publication Workflow)',
   u'Send back (Simple Publication Workflow)',
   u'Submit for publication (Simple Publication Workflow)']


Using Updating View
-------------------

  By default only Managers (with the ManagePortal permission) can
  update FeedFolders.

  >>> self.setRoles('Manager')
  >>> feedContainer.itemTransitions = ['publish']
  >>> feedContainer.enclosureTransitions = ['publish']
  >>> view = feeder.restrictedTraverse('@@update_feed_items')
  >>> view.update()
  >>> self.setRoles('')

Make sure we got what we wanted.

  >>> sorted([x for x in feeder.objectIds('ATEvent')])
  ['0cfbced08adbdc1f3bf30b4120371b7d', '30ca408a75537f05d03821c64473289e', '649c8553c458001dbbb9b15957d58a92', 'c17db5a7fa227e2e34193c71a173dbb1']

  >>> test_doc = feeder['30ca408a75537f05d03821c64473289e']
  >>> test_doc.title
  u'Party!'
  >>> test_doc.Description()
  'Party on the roof of the Mediterranean Inn'
  >>> test_doc.getText()
  '<div>\nwoo hoo, a party!\n</div>'
  >>> enclosure = test_doc.getRelatedItems()[0]
  >>> enclosure
  <ATFile at ...>

And did the automatic transition work?
For the item:

  >>> from Products.CMFCore.utils import getToolByName
  >>> wf_tool = getToolByName(folder,'portal_workflow')
  >>> chain = wf_tool.getChainFor(test_doc)
  >>> status = wf_tool.getStatusOf(chain[0], test_doc)
  >>> status['review_state']
  'published'
  >>> status['comments']
  'Automatic transition triggered by FeedFolder'

For the enclosure:

  >>> chain = wf_tool.getChainFor(enclosure)
  >>> status = wf_tool.getStatusOf(chain[0], enclosure)
  >>> status['review_state']
  'published'
  >>> status['comments']
  'Automatic transition triggered by FeedFolder'


Annotated Metadata Handler
--------------------------

Feedfeeder comes with an unregistered zope3 annotations based metadata
handler adapter.  Essentially it scans the content of an atom entry
for a toplevel DL entry and saves the DT/DD items as annotation
values.  Lets make sure that works.

  >>> id = folder.invokeFactory('Folder', 'feeder2')
  >>> feeder = folder.feeder2

  >>> from zope import component
  >>> from Products.feedfeeder.interfaces.contenthandler import IFeedItemContentHandler
  >>> from Products.feedfeeder.contenthandler import AnnotationContentHandler
  >>> from Products.feedfeeder.interfaces.item import IFeedItem

  >>> component.provideAdapter(AnnotationContentHandler,
  ...                          adapts=(IFeedItem,),
  ...                          provides=IFeedItemContentHandler,
  ...                          name=u'definition-list-metadata')
  
  >>> feedContainer = folder_ifaces.IFolderFeeds(feeder)
  >>> feedContainer.feedURLs = [
  ...     'file://'+os.path.join(samplesdir, 'samplefeed1.xml')]
  >>> feedContainer.itemType = 'Event'
  >>> interface.alsoProvides(feeder, folder_ifaces.IFeedFolder)
  >>> feeder.reindexObject(idxs=['object_provides'])

  >>> self.setRoles('Manager')
  >>> view = feeder.restrictedTraverse('@@update_feed_items')
  >>> view.update()
  >>> self.setRoles('')

Now that we've retrieved the items, lets make sure the metadata we expect
is present.

  >>> from Products.feedfeeder.interfaces import item as item_ifaces
  >>> try:
  ...     from zope.annotation import IAnnotations
  ... except ImportError:
  ...     from zope.app.annotation import IAnnotations
  >>> item = feeder['649c8553c458001dbbb9b15957d58a92']
  >>> annotations = IAnnotations(item)
  >>> metadata = annotations[AnnotationContentHandler.ANNO_KEY]
  >>> dict(metadata)
  {u'date': u'2006-03-23'}

Also make sure that the normal content is still available, but that
the dl with the extra data is gone.

  >>> text = item.getText()
  >>> 'definition-list-metadata' not in text
  True
  >>> 'the real text body here' in text
  True

Events
------

After a feed item has been consumed it fires an appropriate event to
signify this.  First lets clean up the feeder.

  >>> feeder.manage_delObjects([x for x in feeder.objectIds()])

Make sure that event is being properly fired and handled.

  >>> class Handler:
  ...     event_obj = None
  ...     event_evt = None
  ...     def handle(self, event, obj):
  ...         self.event_obj = event
  ...         self.event_evt = obj
  >>> handler = Handler()

  >>> from zope import component
  >>> from Products.feedfeeder.interfaces.item import IFeedItemConsumedEvent
  >>> component.provideHandler(handler.handle,
  ...                          (IFeedItem, IFeedItemConsumedEvent))

Now that the event handler has been setup, parse in some entries and
make sure the handler is getting to handle them.

  >>> self.setRoles('Manager')
  >>> view = feeder.restrictedTraverse('@@update_feed_items')
  >>> view.update()
  >>> self.setRoles('')

  >>> handler.event_evt
  <Products.feedfeeder.events.FeedItemConsumedEvent ...>
  >>> handler.event_obj
  <ATEvent ...>
